#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "BisonFoods"]

def Xform "Root"
{
    reorder nameChildren = ["GeyserSandbox", "GeyserPlaceholder", "Car", "Environment", "Transform", "msx_geyser_sfx_v1_wav"]
    def "GeyserSandbox" (
        active = true
        references = @EsmeTestingScene.usda@
    )
    {
        reorder nameChildren = ["GeyserGroup", "Collider", "InputTarget", "RCP_BehaviorsContainer", "OnTap", "AnimationLibrary", "Cube"]
        float3 xformOp:scale = (0.12, 0.12, 0.12)
        float3 xformOp:translate = (-0.5863614, 0.6982096, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (6.0065885, 0.6966542, 6.006589)
                float height = 0.6966542
                float radius = 3.0032945
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -0.11140166, -5.9604645e-7)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/GeyserSandbox/OnTap>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnTap"
        {
            rel actions = </Root/GeyserSandbox/OnTap/Action>
            uniform bool exclusive
            rel triggers = </Root/GeyserSandbox/OnTap/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/GeyserSandbox>
                token info:id = "TapGesture"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/GeyserPlaceholder>
                rel animationLibraryKeyOverrideKey = </Root/GeyserSandbox/OnTap/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }

        def RealityKitComponent "AnimationLibrary"
        {
            uniform token info:id = "RealityKit.AnimationLibrary"
        }

        def Cube "Cube" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/GeyserSandbox/Cube/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.8333334, 0.8333334, 0.8333334)
            float3 xformOp:translate = (0.24183846, 0.014605999, 0.42841068)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/GeyserSandbox/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        over "GeyserGroup"
        {
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RealityKitComponent "AudioLibrary"
        {
            uniform token info:id = "RealityKit.AudioLibrary"

            def RealityKitDict "resources"
            {
                string[] keys = ["msx geyser sfx v1.wav"]
                rel values = </Root/msx_geyser_sfx_v1_wav>
            }
        }
    }

    def RealityKitTimeline "GeyserPlaceholder"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Emphasize"
            {
                string actionKind = "emphasize"
                int blendLayer = 300
                double duration = 10
                uniform token info:id = "1E5DCCAA-1323-4763-96AE-E68889B3AC96"
                double startTime = 0.021674107142857144
                token style = "playful"
                rel target = </Root/GeyserSandbox/Cube>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "msx geyser sfx v1.wav"
                bool controlPlayback = 1
                double duration = 10.037337443263572
                uniform token info:id = "4460F7F5-0807-4692-9C2E-47FC5B7D0CAB"
                double startTime = 0
                rel target = </Root/GeyserSandbox>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def "Car" (
        active = true
        references = @Car.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, -3.7414205)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Environment" (
        active = true
        references = @Environment.usdz@
    )
    {
        float3 xformOp:scale = (2, 2, 2)
        float3 xformOp:translate = (0, 1.5337582, 18.237839)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RealityKitAudioFile "msx_geyser_sfx_v1_wav"
    {
        uniform asset file = @Sounds/msx geyser sfx v1.wav@
        uniform bool shouldLoop = 0
    }
}

def Xform "BisonFoods" (
    active = true
)
{
    reorder nameChildren = ["_apple", "wildflower", "flower", "PBR___Metallic_Roughness_Alpha_blend"]
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "_apple" (
        active = true
        references = @BisonFoods/ apple.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.02, 0.02, 0.02)
        float3 xformOp:translate = (1.4970776, 0.40427256, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "wildflower" (
        active = true
        references = @BisonFoods/wildflower.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.001, 0.001, 0.001)
        float3 xformOp:translate = (0.57583255, 0.4577253, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "flower" (
        active = true
        references = @BisonFoods/flower.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        float3 xformOp:translate = (-0.7702482, 0.7183326, 0.8397063)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "PBR___Metallic_Roughness_Alpha_blend" (
        active = true
        references = @BisonFoods/PBR - Metallic Roughness Alpha-blend.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.001, 0.001, 0.001)
        float3 xformOp:translate = (-1.0397427, 0.5889077, -0.44686377)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

